/*
===========================================================================
Store Procedure: Load Bronze Layer (Source -> Bronze)
===========================================================================
Script Purpose:
This stored procedure loads data into the BRONZE schema from an external CSV files.
It performs the following actions:
Truncate the bronze tables before loading data. 
Uses the "COPY" command in postgreSQL to load data from CSV files to BRONZE tables.

Parameters:
   None.
   This store procedure does not accept any parameters or return any values.

Usage Example:
    CALL bronze_load_procedure();   
=========================================================================
*/
-- Loading our CRM and ERP data from the local machine --

-- Creating store procedure for re-useability

CREATE OR REPLACE PROCEDURE bronze_load ()
language plpgsql
AS $$
-- Determing time taking to copy each file, display error if any and count rows in each file.
DECLARE
	start_time  TIMESTAMP; -- time when the upload starts
	end_time  TIMESTAMP; -- time when the upload ends
	duration  INTERVAL; -- difference btween end_time and start_time
	row_count  BIGINT; -- count the total rows in each file

BEGIN 
	

	BEGIN
			start_time := clock_timestamp();
		-- Bulk loading of the CSV file from the source
		-- Truncate and copy csv file into table bronze_crm_cust_info
		TRUNCATE TABLE bronze_crm_cust_info; 
		COPY bronze_crm_cust_info
		FROM 'C:\Program Files\PostgreSQL\16\cust_info.csv'
		DELIMITER ','
		CSV HEADER;
			end_time := clock_timestamp();
			duration := end_time - start_time;
      
		RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
			EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;
			
		-- count the total rows from bronze_crm_cust_info
		SELECT COUNT(*) INTO row_count FROM bronze_crm_cust_info;
		RAISE NOTICE 'total no of rows in bronze_crm_cust_info: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;


	BEGIN 
			start_time := clock_timestamp();	
		-- Truncate and copy csv file into table bronze_crm_prd_info
		TRUNCATE TABLE bronze_crm_prd_info;
		COPY bronze_crm_prd_info
		FROM 'C:\Program Files\PostgreSQL\16\prd_info.csv'
		DELIMITER ','
		CSV HEADER;
 		end_time := clock_timestamp();
		duration := end_time - start_time;
		
		RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
			EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;
			
		-- count the total rows from bronze_crm_prd_info
		SELECT COUNT(*) INTO row_count FROM bronze_crm_prd_info;
		RAISE NOTICE 'total no of rows in bronze_crm_prd_info: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	
	END;

	BEGIN
			start_time := clock_timestamp();
		-- Truncate and copy csv file into table bronze_crm_sales_detail
		TRUNCATE TABLE bronze_crm_sales_details;
		COPY bronze_crm_sales_details
		FROM 'C:\Program Files\PostgreSQL\16\sales_details.csv'
		DELIMITER ','
		CSV HEADER;
		end_time := clock_timestamp();
		duration := end_time - start_time;
		
		RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
			EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;
			
		-- count the total rows from bronze_crm_sales_details
		SELECT COUNT(*) INTO row_count FROM bronze_crm_sales_details;
		RAISE NOTICE 'total no of rows in bronze_crm_sales_details: %', row_count;
	
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;


	BEGIN 
			start_time := clock_timestamp();
	-- Truncate and copy csv file into table bronze_erp_loc_a101
		TRUNCATE TABLE bronze_erp_loc_a101;
		COPY bronze_erp_loc_a101
		FROM 'C:\Program Files\PostgreSQL\16\LOC_A101.csv'
		DELIMITER ','
		CSV HEADER;
		end_time := clock_timestamp();
		duration := end_time - start_time;
		
		RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
			EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;
			
		-- count the total rows from bronze_erp_loc_a101
		SELECT COUNT(*) INTO row_count FROM bronze_erp_loc_a101;
		RAISE NOTICE 'total no of rows in bronze_erp_loc_a101: %', row_count;
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;


BEGIN
		start_time := clock_timestamp();
-- Truncate and copy csv file into table bronze_erp_cust_az12 
	TRUNCATE TABLE bronze_erp_cust_az12;
	COPY bronze_erp_cust_az12
	FROM 'C:\Program Files\PostgreSQL\16\CUST_AZ12.csv'
	DELIMITER ','
	CSV HEADER;
		end_time := clock_timestamp();
		duration := end_time - start_time;
		
		RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
			EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;
	
		-- count the total rows from bronze_erp_cust_az12
		SELECT COUNT(*) INTO row_count FROM bronze_erp_cust_az12;
		RAISE NOTICE 'total no of rows in bronze_erp_cust_az12: %', row_count;
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
		
	
	END;

 BEGIN 
			start_time := clock_timestamp();
		TRUNCATE TABLE bronze_erp_cat_g1v2;
		COPY bronze_erp_cat_g1v2
		FROM 'C:\Program Files\PostgreSQL\16\PX_CAT_G1V2.csv'
		DELIMITER ','
		CSV HEADER;
		end_time := clock_timestamp();
		duration := end_time - start_time;
		
	RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
		EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;

		-- count the total rows from bronze_erp_cat_g1v2
		SELECT COUNT(*) INTO row_count FROM bronze_erp_cat_g1v2;
		RAISE NOTICE 'total no of rows in bronze_erp_cat_g1v2: %', row_count;
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;

	END;

END;
$$;


CALL bronze_load ();

