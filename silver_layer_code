--Dropping if exists and Creating table for silver_crm_cust_info
DROP TABLE IF EXISTS silver_crm_cust_info;
CREATE TABLE silver_crm_cust_info (
	cst_id INT,
	cst_key VARCHAR (50),
	cst_firstname VARCHAR (50),
	cst_lastname VARCHAR (50),
	cst_marital_status VARCHAR (50),
	cst_gndr VARCHAR (50),
	cst_create_date DATE,
	dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
);

-- Dropping if exists and Creating table for silver_crm_prd_info
DROP TABLE IF EXISTS silver_crm_prd_info; 
CREATE TABLE silver_crm_prd_info (
	prd_id INT,
	cat_id VARCHAR (50),
	prd_key VARCHAR (50),
	prd_nm VARCHAR (50),
	prd_cost INT,
	prd_line VARCHAR (50),
	prd_start_dt TIMESTAMP,
	prd_end_dt TIMESTAMP,
	dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
);

-- Dropping if exists and Creating table for silver_crm_sales_details
DROP TABLE IF EXISTS silver_crm_sales_details;
CREATE TABLE silver_crm_sales_details (
	sls_ord_num VARCHAR (50),
	sls_prd_key VARCHAR (50),
	sls_cust_id INT,
	sls_order_dt DATE,
	sls_ship_dt DATE,
	sls_due_dt DATE,
	sls_sales INT,
	sls_quantity INT,
	sls_price INT,
	dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
);

-- Dropping if exists and Creating silver_erp_loc_a101
DROP TABLE IF EXISTS silver_erp_loc_a101;
CREATE TABLE silver_erp_loc_a101 (
	cid VARCHAR (50),
	cntry VARCHAR (50),
	dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
);

-- Dropping if exists and Creating silver_erp_cust_az12 (
DROP TABLE IF EXISTS silver_erp_cust_az12;
CREATE TABLE silver_erp_cust_az12 (
	cid VARCHAR (50),
	bdate DATE,
	gen VARCHAR (50),
	dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
);

-- Dropping if exists and Creating table silver_erp_cat_g1v2
DROP TABLE IF EXISTS silver_erp_cat_g1v2;
CREATE TABLE silver_erp_cat_g1v2 (
	id VARCHAR (50),
	cat VARCHAR (50),
	subcat VARCHAR (50),
	maintenance VARCHAR (50),
	dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
);





__ SILVER LAYER --


CREATE OR REPLACE PROCEDURE silver_load()
LANGUAGE plpgsql
AS $$
DECLARE 
	start_time TIMESTAMP;
	end_time TIMESTAMP;
	duration INTERVAL;
	row_count BIGINT;
BEGIN

	BEGIN 
		start_time := clock_timestamp();
-- Truncate and copy csv file into table silver_crm_cust_info
TRUNCATE TABLE silver_crm_cust_info;
INSERT INTO silver_crm_cust_info (
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_marital_status,
	cst_gndr,
	cst_create_date
) 

-- Select customer details with cleaned fields and latest record per customer
SELECT 
    cst_id,                                   -- Customer unique identifier
    cst_key,                                  -- Customer key 
    TRIM(cst_firstname) AS cst_firstname,     -- Trim spaces from first name
    TRIM(cst_lastname) AS cst_lastname,       -- Trim spaces from last name

    -- Map marital status codes to descriptive values
    CASE
        WHEN TRIM(UPPER(cst_marital_status)) = 'M' THEN 'Married'
        WHEN TRIM(UPPER(cst_marital_status)) = 'S' THEN 'Single'
        ELSE 'n/a'                            -- Default for null/unknown values
    END AS cst_marital_status,

    -- Map gender codes to descriptive values
    CASE
        WHEN TRIM(UPPER(cst_gndr)) = 'M' THEN 'Male'
        WHEN TRIM(UPPER(cst_gndr)) = 'F' THEN 'Female'
        ELSE 'n/a'                            -- Default for null/unknown values
    END AS cst_gndr,	

    cst_create_date                           -- Record creation timestamp

FROM (
    -- Deduplicate customers by keeping only the latest record per cst_id
    SELECT *,
        ROW_NUMBER() OVER(
            PARTITION BY cst_id 
            ORDER BY cst_create_date DESC     -- Latest record first
        ) AS latest
    FROM bronze_crm_cust_info
    WHERE cst_id IS NOT NULL                  -- Exclude records without ID
) y
WHERE latest = 1;                              -- Keep only the latest record per customer

		end_time := clock_timestamp();
		duration := end_time - start_time;
	RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
	EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;

	SELECT COUNT(*) INTO row_count FROM silver_crm_cust_info;
			RAISE NOTICE 'total no of rows in silver_crm_cust_info: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;

	
	BEGIN
		start_time := clock_timestamp();
-- Truncate and copy csv file into table silver_crm_prd_info
TRUNCATE TABLE silver_crm_prd_info;
INSERT INTO silver_crm_prd_info (
	prd_id,
	cat_id,
	prd_key,
	prd_nm,
	prd_cost,
	prd_line,
	prd_start_dt,
	prd_end_dt
)
-- Extract product details with category, line mapping, and effective date ranges
SELECT 
    prd_id,                                             -- Product unique identifier

    -- Extract first 5 characters of product key, remove underscores → category ID
    REPLACE(SUBSTRING(prd_key, 1, 5), '_', '') AS cat_id,   

    -- Extract product key starting from 7th character → cleaned product key
    SUBSTRING(prd_key FROM 7) AS prd_key,                   

    TRIM(prd_nm) AS prd_nm,                           -- Product name (trimmed of spaces)

    COALESCE(prd_cost, 0) AS prd_cost,                -- Product cost (replace NULL with 0)

    -- Map product line codes to descriptive values
    CASE
        WHEN TRIM(UPPER(prd_line)) = 'M' THEN 'Mountain'
        WHEN TRIM(UPPER(prd_line)) = 'R' THEN 'Road'
        WHEN TRIM(UPPER(prd_line)) = 'S' THEN 'Other Sales'
        WHEN TRIM(UPPER(prd_line)) = 'T' THEN 'Touring'
        ELSE 'n/a'                                    -- Default if code is missing or unknown
    END AS prd_line,

    CAST(prd_start_dt AS DATE) AS prd_start_dt,       -- Product start date (cast to DATE only)

    -- Calculate product end date as one day before the next product start date
    CAST(
        LEAD(prd_start_dt) 
        OVER(PARTITION BY prd_key ORDER BY prd_start_dt) - INTERVAL '1 day' 
        AS DATE
    ) AS prd_end_dt

FROM bronze_crm_prd_info;                             -- Source: product info table


		end_time := clock_timestamp();
		duration := end_time - start_time;
	RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
	EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;

	SELECT COUNT(*) INTO row_count FROM silver_crm_prd_info;
			RAISE NOTICE 'total no of rows in silver_crm_prd_info: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;


	BEGIN
		start_time := clock_timestamp();
-- Truncate and copy csv file into table silver_crm_sales_details
TRUNCATE TABLE silver_crm_sales_details;
INSERT INTO silver_crm_sales_details (
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	sls_sales,
	sls_quantity,
	sls_price 
)
-- Selecting and cleaning sales details from the bronze_crm_sales_details table
SELECT 
    sls_ord_num,          -- Sales order number
    sls_prd_key,          -- Product key
    sls_cust_id,          -- Customer ID


    -- Convert sls_order_dt from integer to DATE if valid, else NULL
    CASE
        WHEN sls_order_dt = 0 OR LENGTH(CAST(sls_order_dt AS TEXT)) <> 8 
            THEN NULL
        ELSE CAST(CAST(sls_order_dt AS TEXT) AS DATE)
    END AS sls_order_dt,

    -- Convert sls_ship_dt from integer to DATE if valid, else NULL
    CASE
        WHEN sls_ship_dt = 0 OR LENGTH(CAST(sls_ship_dt AS TEXT)) <> 8 
            THEN NULL
        ELSE CAST(CAST(sls_ship_dt AS TEXT) AS DATE)
    END AS sls_ship_dt,

    -- Convert sls_due_dt from integer to DATE if valid, else NULL
    CASE
        WHEN sls_due_dt = 0 OR LENGTH(CAST(sls_due_dt AS TEXT)) <> 8 
            THEN NULL
        ELSE CAST(CAST(sls_due_dt AS TEXT) AS DATE)
    END AS sls_due_dt,

    -- Fix sls_sales: if NULL, zero, or inconsistent with quantity*price, recalculate
    CASE 
        WHEN sls_sales IS NULL 
             OR sls_sales <= 0 
             OR sls_sales <> sls_quantity * ABS(sls_price)
        THEN sls_quantity * ABS(sls_price)
        ELSE sls_sales
    END AS sls_sales,

    sls_quantity,  -- Quantity sold

    -- Fix sls_price: if NULL or zero, recalculate as sls_sales / quantity
    CASE 
        WHEN sls_price IS NULL OR sls_price <= 0 
        THEN sls_sales / COALESCE(sls_quantity, 0)
        ELSE sls_price
    END AS sls_price

FROM bronze_crm_sales_details;


		end_time := clock_timestamp();
		duration := end_time - start_time;
	RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
	EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;

	SELECT COUNT(*) INTO row_count FROM silver_crm_sales_details;
			RAISE NOTICE 'total no of rows in silver_crm_sales_details: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;


	BEGIN
		start_time := clock_timestamp();
-- Truncate and copy csv file into table silver_erp_cust_az12
TRUNCATE TABLE silver_erp_cust_az12;
INSERT INTO silver_erp_cust_az12 (
	cid,
	bdate,
	gen
)
SELECT 
    -- Remove 'NAS' prefix if present
    CASE
        WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LENGTH(cid))
        ELSE cid
    END AS cid,

    -- Nullify future birthdates
    CASE
        WHEN bdate > CURRENT_DATE THEN NULL
        ELSE bdate
    END AS bdate,
    -- Standardize gender
    CASE
        WHEN UPPER(TRIM(gen)) LIKE 'F%' THEN 'Female'
        WHEN UPPER(TRIM(gen)) LIKE 'M%' THEN 'Male'
        ELSE 'n/a'
    END AS gen
FROM bronze_erp_cust_az12;

		end_time := clock_timestamp();
		duration := end_time - start_time;
	RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
	EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;

	SELECT COUNT(*) INTO row_count FROM silver_erp_cust_az12;
			RAISE NOTICE 'total no of rows in silver_erp_cust_az12: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;
	

	BEGIN
		start_time := clock_timestamp();

TRUNCATE TABLE silver_erp_loc_a101;
INSERT INTO silver_erp_loc_a101 (
	cid,
	cntry 
)
SELECT
    -- Remove all hyphens from customer ID
    REPLACE(cid, '-', '') AS cid,

    -- Standardize country names
    CASE
        -- Map 'US' or 'USA' (in any case) to 'United States'
        WHEN UPPER(TRIM(cntry)) IN ('US', 'USA') THEN 'United States'

        -- Map 'DE' to 'Germany'
        WHEN UPPER(TRIM(cntry)) = 'DE' THEN 'Germany'

        -- Handle empty strings or NULLs as 'n/a'
        WHEN UPPER(TRIM(cntry)) = '' OR cntry IS NULL THEN 'n/a'

        -- Otherwise, keep the trimmed original value
        ELSE TRIM(cntry)
    END AS cntry

FROM bronze_erp_loc_a101;

	end_time := clock_timestamp();
		duration := end_time - start_time;
	RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
	EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;

	SELECT COUNT(*) INTO row_count FROM silver_erp_loc_a101;
			RAISE NOTICE 'total no of rows in silver_erp_cust_az12: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	END;


	BEGIN
		start_time := clock_timestamp();
-- Truncate and copy csv file into table silver_erp_cat_g1v2
TRUNCATE TABLE silver_erp_cat_g1v2;
INSERT INTO silver_erp_cat_g1v2 (
	id,
	cat,
	subcat,
	maintenance
)
SELECT 
	id,
	cat,
	subcat,
	maintenance
	FROM bronze_erp_cat_g1v2;

end_time := clock_timestamp();
		duration := end_time - start_time;
	RAISE NOTICE 'Load Time: % ms', -- display the loading time in millisecond
	EXTRACT(MILLISECOND FROM duration) + EXTRACT(SECOND FROM duration)* 1000;

	SELECT COUNT(*) INTO row_count FROM silver_erp_cat_g1v2;
			RAISE NOTICE 'total no of rows in silver_erp_cat_g1v2: %', row_count;
			
	EXCEPTION -- display error message if any error
		WHEN OTHERS THEN
		RAISE NOTICE 'no of errors during upload: %', SQLERRM;
	 END;

	END;
$$;
