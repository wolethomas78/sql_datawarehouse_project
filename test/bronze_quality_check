Quality Checks

SCRIPT PURPOSE:
    This script performs various quality checks for data consistency, accuracy, and standardization
     across all bronze layer schema. It includes checks for:
    - Null or duplicate primary keys.
    - Unwanted spaces in string fields.
    - Data standardization and consitency.
    - Invalid data ranges and orders.
    - Data consistency between related fields.

USAGE NOTES:
    - Run these checks after data loading bronze layer.
    - investigate and resolve any descripancy found during the checks.
*/


SELECT * FROM bronze_crm_cust_info;

-- Checking the quality of our data by checking each column of bronze_crm_cust_info  --
SELECT cst_id, COUNT(*)
FROM bronze_crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

SELECT cst_key FROM bronze_crm_cust_info
WHERE cst_key <> TRIM(cst_key);

SELECT cst_key, COUNT(*)
FROM bronze_crm_cust_info
GROUP BY cst_key
HAVING COUNT(*) > 1 OR cst_key IS NULL;

-- Check unwanted spaces --
SELECT cst_firstname FROM bronze_crm_cust_info
WHERE cst_firstname <> TRIM(cst_firstname);

-- Check unwanted spaces --
SELECT cst_lastname FROM bronze_crm_cust_info
WHERE cst_lastname <> TRIM(cst_lastname);

SELECT DISTINCT cst_marital_status
FROM bronze_crm_cust_info;

SELECT DISTINCT cst_gndr
FROM bronze_crm_cust_info;

SELECT cst_id, cst_create_date,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS latest
FROM bronze_crm_cust_info
WHERE cst_id = 1 OR cst_id IS NOT NULL;

SELECT *
FROM (SELECT *,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS latest
FROM bronze_crm_cust_info
WHERE cst_id = 1 OR cst_id IS NOT NULL) t 
WHERE latest = 1;

-- INSERT DATA INTO silver_crm_cust_info table--
TRUNCATE TABLE silver_crm_cust_info;
INSERT INTO silver_crm_cust_info(
cst_id,
cst_key,
cst_firstname,
cst_lastname,
cst_marital_status,
cst_gndr,
cst_create_date
)
SELECT
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname, --Removing unwanted space from cst_firstname column--
TRIM(cst_lastname) AS cst_lastname, --Removing unwanted space from cst_lastname column--
CASE 
	WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
	WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
	ELSE 'n/a' --Normalization of marital status column to make it readable --
END cst_marital_status,
CASE 
	WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
	ELSE 'n/a'
END cst_gndr, --Normalization of gender column to make it readable --
cst_create_date
FROM (SELECT *,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS latest
FROM bronze_crm_cust_info
WHERE cst_id = 1 OR cst_id IS NOT NULL) t 
WHERE latest = 1;-- Select the most recent record per customer--



-- Checking the quality of our data by checking each column of silver_crm_cust_info  --
SELECT cst_id, COUNT(*)
FROM silver_crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

SELECT cst_key FROM silver_crm_cust_info
WHERE cst_key <> TRIM(cst_key);

SELECT cst_key, COUNT(*)
FROM silver_crm_cust_info
GROUP BY cst_key
HAVING COUNT(*) > 1 OR cst_key IS NULL;

-- Check unwanted spaces --
SELECT cst_firstname FROM silver_crm_cust_info
WHERE cst_firstname <> TRIM(cst_firstname);

-- Check unwanted spaces --
SELECT cst_lastname FROM silver_crm_cust_info
WHERE cst_lastname <> TRIM(cst_lastname);

SELECT DISTINCT cst_marital_status
FROM silver_crm_cust_info;

-- Data standardization and Consistency--
SELECT DISTINCT cst_gndr
FROM silver_crm_cust_info;

SELECT cst_id, cst_create_date,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS latest
FROM silver_crm_cust_info
WHERE cst_id = 1 OR cst_id IS NOT NULL;

SELECT * FROM silver_crm_cust_info;







-- Checking the quality of our data by checking each column of bronze_crm_prd_info  --
SELECT * FROM bronze_crm_prd_info;

SELECT prd_id, COUNT(*)
FROM bronze_crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

SELECT prd_key FROM bronze_crm_prd_info
WHERE prd_key <> TRIM(prd_key);

SELECT prd_nm FROM bronze_crm_prd_info
WHERE prd_nm <> TRIM(prd_nm);

SELECT prd_cost, COUNT(*)
FROM bronze_crm_prd_info
GROUP BY prd_cost
HAVING COUNT(*) < 0 OR prd_cost IS NULL;

-- Check unwanted spaces --
SELECT DISTINCT prd_line FROM bronze_crm_prd_info;

SELECT *
FROM bronze_crm_prd_info
WHERE prd_start_dt > prd_end_dt;
