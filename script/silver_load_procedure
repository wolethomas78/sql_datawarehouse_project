/*
STORE PROCEDURE: LOAD SILVER LAYER (BRONZE => SILVER)
SCRIPT PURPOSE:
    This stored procedure performs the ETL (EXTRACT, TRANSFORM, LOAD) process to 
    populate the SILVER LAYER SCHEMA table from BRONZE SCHEMA.
ACTIONS PERFORM:
    -Truncate silver tables.
    Inserts transformed and cleaned data from BRONZE SCHEMA into SILVER tables.
PARAMETERS:
    None.
    This store procedure does not acceptany parameters or return any values.
USAGE EXAMPLE:
    CALL silver_load_procedure();

  */
  

CREATE OR REPLACE PROCEDURE silver_load_procedure()
LANGUAGE plpgsql
AS $$
DECLARE 
    row_count INT;
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration INTERVAL;
    total_start_time TIMESTAMP;
    total_end_time TIMESTAMP;
    total_duration INTERVAL;
BEGIN
    total_start_time := clock_timestamp();

    -- === silver_crm_cust_info ===
    BEGIN
        RAISE NOTICE 'Processing silver_crm_cust_info';
        start_time := clock_timestamp();

        TRUNCATE TABLE silver_crm_cust_info;
        RAISE NOTICE 'Truncated silver_crm_cust_info';

        INSERT INTO silver_crm_cust_info (
            cst_id, cst_key, cst_firstname, cst_lastname,
            cst_marital_status, cst_gndr, cst_create_date
        )
        SELECT
            cst_id,
            cst_key,
            TRIM(cst_firstname),
            TRIM(cst_lastname),
            CASE 
                WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
                WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
                ELSE 'n/a'
            END,
            CASE 
                WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
                WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
                ELSE 'n/a'
            END,
            cst_create_date
        FROM (
            SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS latest
            FROM bronze_crm_cust_info
            WHERE cst_id IS NOT NULL
        ) t
        WHERE latest = 1;

        GET DIAGNOSTICS row_count = ROW_COUNT;
        end_time := clock_timestamp();
        duration := end_time - start_time;
        RAISE NOTICE 'Inserted % rows into silver_crm_cust_info in %', row_count, duration;
    EXCEPTION WHEN OTHERS THEN
        RAISE WARNING 'Error in silver_crm_cust_info: %', SQLERRM;
    END;

    -- === silver_crm_prd_info ===
    BEGIN
        RAISE NOTICE 'Processing silver_crm_prd_info';
        start_time := clock_timestamp();

        TRUNCATE TABLE silver_crm_prd_info;
        RAISE NOTICE 'Truncated silver_crm_prd_info';

        INSERT INTO silver_crm_prd_info (
            prd_id, cat_id, prd_key, prd_nm,
            prd_cost, prd_line, prd_start_dt, prd_end_dt
        )
        SELECT
            prd_id,
            REPLACE(SUBSTRING(prd_key,1,5),'-','_'),
            SUBSTRING(prd_key,7),
            prd_nm,
            COALESCE(prd_cost, 0),
            CASE
                WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
                WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
                WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Beverages'
                WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Tourism'
                ELSE 'n/a'
            END,
            CAST(prd_start_dt AS DATE),
            CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt) - INTERVAL '1 day' AS DATE)
        FROM bronze_crm_prd_info;

        GET DIAGNOSTICS row_count = ROW_COUNT;
        end_time := clock_timestamp();
        duration := end_time - start_time;
        RAISE NOTICE 'Inserted % rows into silver_crm_prd_info in %', row_count, duration;
    EXCEPTION WHEN OTHERS THEN
        RAISE WARNING 'Error in silver_crm_prd_info: %', SQLERRM;
    END;

    -- === silver_crm_sales_details ===
    BEGIN
        RAISE NOTICE 'Processing silver_crm_sales_details';
        start_time := clock_timestamp();

        TRUNCATE TABLE silver_crm_sales_details;
        RAISE NOTICE 'Truncated silver_crm_sales_details';

        INSERT INTO silver_crm_sales_details (
            sls_ord_num, sls_prd_key, sls_cust_id,
            sls_order_dt, sls_ship_dt, sls_due_dt,
            sls_sales, sls_quantity, sls_price
        )
        SELECT
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            CASE WHEN sls_order_dt = 0 OR LENGTH(sls_order_dt::TEXT) <> 8 OR sls_order_dt::TEXT !~ '^\d{8}$'
                 THEN NULL ELSE TO_DATE(sls_order_dt::TEXT, 'YYYYMMDD') END,
            CASE WHEN sls_ship_dt = 0 OR LENGTH(sls_ship_dt::TEXT) <> 8 OR sls_ship_dt::TEXT !~ '^\d{8}$'
                 THEN NULL ELSE TO_DATE(sls_ship_dt::TEXT, 'YYYYMMDD') END,
            CASE WHEN sls_due_dt = 0 OR LENGTH(sls_due_dt::TEXT) <> 8 OR sls_due_dt::TEXT !~ '^\d{8}$'
                 THEN NULL ELSE TO_DATE(sls_due_dt::TEXT, 'YYYYMMDD') END,
            CASE WHEN sls_sales <= 0 OR sls_sales IS NULL OR sls_sales <> sls_quantity * ABS(sls_price)
                 THEN sls_quantity * ABS(sls_price) ELSE sls_sales END,
            sls_quantity,
            CASE WHEN sls_price IS NULL OR sls_price <= 0
                 THEN sls_sales / NULLIF(sls_quantity, 0) ELSE sls_price END
        FROM bronze_crm_sales_details;

        GET DIAGNOSTICS row_count = ROW_COUNT;
        end_time := clock_timestamp();
        duration := end_time - start_time;
        RAISE NOTICE 'Inserted % rows into silver_crm_sales_details in %', row_count, duration;
    EXCEPTION WHEN OTHERS THEN
        RAISE WARNING 'Error in silver_crm_sales_details: %', SQLERRM;
    END;

    -- === silver_erp_cust_az12 ===
    BEGIN
        RAISE NOTICE 'Processing silver_erp_cust_az12';
        start_time := clock_timestamp();

        TRUNCATE TABLE silver_erp_cust_az12;
        RAISE NOTICE 'Truncated silver_erp_cust_az12';

        INSERT INTO silver_erp_cust_az12 (cid, bdate, gen)
        SELECT
            CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4) ELSE cid END,
            CASE WHEN bdate > CURRENT_TIMESTAMP THEN NULL ELSE bdate END,
            CASE 
                WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
                WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
                ELSE 'n/a'
            END
        FROM bronze_erp_cust_az12;

        GET DIAGNOSTICS row_count = ROW_COUNT;
        end_time := clock_timestamp();
        duration := end_time - start_time;
        RAISE NOTICE 'Inserted % rows into silver_erp_cust_az12 in %', row_count, duration;
    EXCEPTION WHEN OTHERS THEN
        RAISE WARNING 'Error in silver_erp_cust_az12: %', SQLERRM;
    END;

    -- === silver_erp_loc_a101 ===
    BEGIN
        RAISE NOTICE 'Processing silver_erp_loc_a101';
        start_time := clock_timestamp();

        TRUNCATE TABLE silver_erp_loc_a101;
        RAISE NOTICE 'Truncated silver_erp_loc_a101';

        INSERT INTO silver_erp_loc_a101 (cid, cntry)
        SELECT
            REPLACE(cid, '-', ''),
            CASE 
                WHEN UPPER(TRIM(cntry)) IN ('US', 'USA', 'UNITED STATES') THEN 'United States'
                WHEN UPPER(TRIM(cntry)) IN ('GERMANY', 'DE') THEN 'Germany'
                WHEN UPPER(TRIM(cntry)) = 'AUSTRALIA' THEN 'Australia'
                WHEN UPPER(TRIM(cntry)) = 'CANADA' THEN 'Canada'
                WHEN UPPER(TRIM(cntry)) = 'FRANCE' THEN 'France'
                WHEN UPPER(TRIM(cntry)) = 'UNITED KINGDOM' THEN 'United Kingdom'
                ELSE 'n/a'
            END
        FROM bronze_erp_loc_a101;

        GET DIAGNOSTICS row_count = ROW_COUNT;
        end_time := clock_timestamp();
        duration := end_time - start_time;
        RAISE NOTICE 'Inserted % rows into silver_erp_loc_a101 in %', row_count, duration;
    EXCEPTION WHEN OTHERS THEN
        RAISE WARNING 'Error in silver_erp_loc_a101: %', SQLERRM;
    END;

    -- === silver_erp_px_cat_g1v2 ===
    BEGIN
        RAISE NOTICE 'Processing silver_erp_px_cat_g1v2';
        start_time := clock_timestamp();

        TRUNCATE TABLE silver_erp_px_cat_g1v2;
        RAISE NOTICE 'Truncated silver_erp_px_cat_g1v2';

        INSERT INTO silver_erp_px_cat_g1v2 (id, cat, subcat, maintenance)
        SELECT id, cat, subcat, maintenance
        FROM bronze_erp_px_cat_g1v2;

        GET DIAGNOSTICS row_count = ROW_COUNT;
        end_time := clock_timestamp();
        duration := end_time - start_time;
        RAISE NOTICE 'Inserted % rows into silver_erp_px_cat_g1v2 in %', row_count, duration;
    EXCEPTION WHEN OTHERS THEN
        RAISE WARNING 'Error in silver_erp_px_cat_g1v2: %', SQLERRM;
    END;

    -- === Final summary ===
    total_end_time := clock_timestamp();
    total_duration := total_end_time - total_start_time;
    RAISE NOTICE 'Procedure silver_load_procedure completed in %', total_duration;

END;
$$;
